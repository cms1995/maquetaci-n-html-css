@import url('https://fonts.googleapis.com/css?family=Roboto+Mono:400,500,700|Roboto+Slab:400,700|Roboto:400,500,700,900&display=swap');


body{
    font-family: 'Roboto Mono', monospace; /*  para q se use en todo el texto esta fuente, buena práctica declararla en el body y no uno por uno */
    margin: 0;
    padding: 0;

}



a{
    text-decoration: none;
    display: inline; /* con esto se va a poner de forma horizontal */
    color: black;
}

.body-main-class{
    position: fixed;    /* con esto nuestra pagina no deberia moverse generando scroll. es un trukillo */
    top: 0;             /* con esto nuestra pagina no deberia moverse generando scroll. es un trukillo */
    bottom: 0;          /* con esto nuestra pagina no deberia moverse generando scroll. es un trukillo */
    left: 0;            /* con esto nuestra pagina no deberia moverse generando scroll. es un trukillo */
    right: 0;           /* con esto nuestra pagina no deberia moverse generando scroll. es un trukillo */
}

.grid-container{
    max-width: 980px;
    margin: auto; /* recordemos q el margin auto, sirve cuando haya mucho espacio, o sea muchos px y la pantalla se vea muy grande y va a haber mucho espacio de lado lateral, lo q hará el margin auto es dividir ese espacio entre el left y el right para q los logres entrar. Con esto logro centrar el espacio de todos los contenedores y adaptarlo a la pantalla. Los elementos se van a quedar ahora siempre en el mismo espacio. Es entre comillas un inicio del responsive. (si queres mirate el video 19 del curso) */
    

}

header{
    width: 100%;
    height: 140px;
    display: grid;
    grid-template-rows: 1fr 1fr;
}

header .header-icon-container{
    width: 100%; /* esto es p q sean igual de ancho q el padre, o sea header */
    height: 50px; /* este ya no va a ser de la altura del padre, recordemos q tenemos 2 contenedores, 1 arriba del otro. ENtonces tenemos   q      dividir esos 140px entre los 2 contendores */
    display: grid;
    background-color: #47cfac;
}

header .header-icon-container .icons{
    width: 300px;
    height: auto; /*esto es p la altura sea tan grande como su padre q es el contenedor de la seccion*/
    display: flex;
    justify-items: flex-end;
    align-items: center;
    justify-content: space-between;
    justify-self: end;
    margin-right: 50px;
}

header .icons span{
    color:white;
}

nav{
    display: grid; /* el display grid nos va a ayudar para poder seccionar estos 2 contendores internos que tenemos. Como lo vamos a hacer? vamos a generar p eso un grid-template 
 */
    grid-template-columns: 1fr 1fr;
    height: 90px;
}

nav .logo-container{
    margin-left: 50px;
}

nav .logo-container img{
    width: 220px;
    margin-top: 10px;
}

nav .profile-link{
    display: flex;
    align-items: center;
    justify-content: flex-end;
    margin-right: 50px;
}

nav .profile-link a{
    color: black;
    border-bottom: 1px solid black;
}

.home-main{
    display: grid;
    grid-template-columns: 1fr 4fr 1fr;/*  hay 3 fracciones y aqui le estoy diciendo al grid q la columna del medio ocupe 4 fracciones. Es aquí en medio donde voy a colocar mi texto y mi botón */
    height: 100%;
    background-image: url('../archivos/img/Cover.png');
    background-position: center; /* esto es p q la imagen no se mueva y se quede en el centro */
    background-repeat: no-repeat;
    background-size: cover;
}

.home-main section{
    display: grid;
    grid-column: 2; /* de mis 3 columnas, estamos haciendo q nos justifique ek texto y el boton en la parte del centro */
    justify-items: center;
    height: 350px;
    margin-top: 80px;
}

.home-title{
    font-size: 30px;
    font-weight: 700px;
    letter-spacing: 10px;
    color: black;
    text-align: center;
    color: white;
}

.home-button{
    width: 110px;
    height: 50px;
    background: #47cfac;
    display: grid;
    align-items: center;
}

.home-button a{
    font-weight: 700;
    font-size: 18px;
}

.blogs-main{
    display: grid;
}
/* como vimos hay 3 columnas q se van a repetir. Enconces queremos generar un grid de 3 columnas para poder colocar cada uno de estos articles */

.blogs-news-container{
    background-color: #e6e9ed;
    padding: 0 50px 40px;
    /* recordemos q el padding es el espacio interno q genera un contenedor a diferencia del margin. Q es el espacio q hace un contenedor o un contenido, hacia otro,
    para poderlos alejar */
}

.blogs-main-new{
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: 2fr;
}

.blogs-news-img-container{
    grid-column: 1;
}

.blogs-news-img-container img{
    /* esto lo voy a usar para darle una dimensión a la imagen de la pc*/
    width: 85%; /* ak usamos % xq como estamos usando 1 grid, este está estipulado con 1 dimensión  y al momento de estar variando con esto(x ej si presiono en el nav minimizar, la imagen lo hará tmb*/

}

.blogs-news-info-container{
    grid-column: 2;
}

.blogs-news-info-container p{
    margin-bottom: 35px;
}

.blogs-posts-container{
    padding: 0 50px 40px;
}

.blogs-posts-container h3{
    border-bottom: 1px solid #cdd2da;
    padding-bottom: 20px;
    text-align: center;
}

.blogs-button{
    border: 1px solid #47cfac;
    padding: 10px 15px;
    font-size: 12px;
}

.blogs-posts-container .post-container{
    display: inline-block;/*  esto es p q los 6 se pongan en fila de forma horizontal y no nos quede el espacio para q los tengamos q acomodar como una lista. Así será + facil trabajar c ellos */.
    padding-left: 10px;
    max-width: 30%;
    margin-bottom: 50px;
}

.blogs-posts-container .post-container p{
    margin-bottom: 35px;
}

.blogs-posts-container .post-container img{
    width: 100%;
}

footer{
    width: 100%;
    height: 80px;
    background-color: #22272d;
    border-top: 35px solid #47cfac;
    text-align: center; /* ak le tenemos q decir al padre q su hijo(osea el p) se alinee en el centro. No lo ponemos abajo */
}

footer p{
    color: white;
    margin-top: 30px;
}

.blogpost-img-container{
    padding: 0 50px 40px;
}

.blogpost-img-container img{
    width: 100%; /* aka es d 100% xq el contenedor ya tiene una dimensión */
}

.blogpost-main-container{
    padding: 0 50px 40px;
}

.blogpost-main-container h3{
    border-bottom: 1px solid #cdd2da;
    padding-bottom: 20px;
}

.blogpost-main-container article h1{
    font-size: 35px;
}

.contact-main-container{
    width: 100%;
    min-height: 250px;
    background-color: #e6e9ed;
    text-align: center;
    padding-bottom: 50px;
}
/* como hacemos ahora para poner q un contenedor quede de costado en el lado izquierdo y el otro de lado derecho?recordemos q div x defecto tiene display block, q lo q hace es, a pesar d q hay espacio, nos va a mandar un contenedor abajo del otro. Entonces tenemos q usar un display inline block y lo hacemos como vemos abajo */

.contact-main-container div{
    display: inline-block;
    width: 49.5%; /* esto para poderlo dividir */
    height: 100%; /* q es la  dimensión de su padre */
}

.contact-main-container div a{
    border-bottom: 1px solid black; /* esto le da el efecto de subrayado al "Contacto" y "Escribe" */
    padding-bottom: 5px;
}

.contact-main-container .contact-left, .contact-right{
    text-align: initial;
    margin-top: 85px;
}


/* así le doy dimensión a las imagenes */
.contact-main-container img{
    width: 100px;
}

.profile-main-container{
    padding:70px 40px;
    background-color: #e6e9ed;
    margin-bottom: 50px;
}

.profile-main-container img{
    width: 320px;
    margin-right: 30px;
}

.profile-main-container .profile-container{
    display: flex;
}

.profile-main-proyects{
    padding: 0 50px 40px;
}

.profile-main-proyects h3{
    border-bottom: 1px solid #cdd2da;
    padding-bottom: 35px;
    text-align: center;
}

.proyect-main-container{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr; /* aca lo q hacemos es dividirlo en 3 fracciones para poder ordenar los proyectos de forma más sencilla. Si tuvieramos + de 3 proyectos, lo q podríamos hacer es a esas 3 columnas, empezarle a generar filas dependiendo la cantidad d proyectos q lleve */
}

.proyect-container{
    padding: 0 5px; /* esto es para q los textos de los articles tengan su separación */
}